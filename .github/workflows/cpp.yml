name: openslide C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:

    runs-on: ${{ matrix.cfg.os }}
    name: ${{ matrix.cfg.os }}@${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.8, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.9, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 5.0, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 6.0, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 7.0, generator: Ninja}

          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 7.0, generator: Ninja}
          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 8.0, generator: Ninja}
          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 9.0, generator: Ninja}

          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.8, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.9, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 5.0, generator: Ninja}
          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 6.0, generator: Ninja}
          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 7.0, generator: Ninja}
          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 8.0, generator: Ninja}
          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 9.0, generator: Ninja}
          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 10,  generator: Ninja}


          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 7, generator: Ninja}
          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 8, generator: Ninja}
          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 9, generator: Ninja}
          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 10,generator: Ninja}

          - {os: windows-latest, cc: cl, cxx: MSVC, cpp-version: 19.28.29333.0, generator: Ninja}
          - {os: windows-latest, cc: cl, cxx: MSVC, cpp-version: 19.28.29333.0, generator: MinGW Makefiles}
          - {os: windows-2016, cc: cl, cxx: MSVC, cpp-version: 19.16.27044.0, generator: Ninja}
          - {os: windows-2016, cc: cl, cxx: MSVC, cpp-version: 19.16.27044.0, generator: MinGW Makefiles}

          - {os: macOS-10.15, cc: gcc, cxx: g++, cpp-version: 9, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.2.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.3.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.4.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.5, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.6, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 11.7, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 12.0.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 12.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 12.1.1, generator: Ninja}
          - {os: macOS-10.15, cc: xcode, cxx: xcode, cpp-version: 12.2, generator: Ninja}

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Install compiler and dependencies (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}

        if [[ "${{ matrix.cfg.cxx }}" == "clang" ]]; then
          sudo apt-get install -y lld-${{ matrix.cfg.cpp-version }} libc++-${{ matrix.cfg.cpp-version }}-dev libc++abi-${{ matrix.cfg.cpp-version }}-dev clang-tools-${{ matrix.cfg.cpp-version }}
        fi

        echo "CC=${{ matrix.cfg.cc }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV

        # Install the required Library
        sudo apt install -y libtiff-dev
        sudo apt install -y libglib2.0-dev
        sudo apt install -y libcairo2-dev
        sudo apt install -y libgdk-pixbuf2.0-dev
        sudo apt install -y libopenjp2-7
        sudo apt install -y libopencv-dev
        sudo apt install -y libsqlite3-dev
        sudo apt install -y libxml2-dev
        sudo apt install -y zlib1g-dev
        sudo apt install -y libpng-dev

        # Install OpenJPEG library from source since bionic distribution doesn't support it
        sudo apt install -y liblcms2-dev libz-dev

        git clone https://github.com/uclouvain/openjpeg --depth 1
        cd openjpeg
        git fetch --unshallow
        mkdir build && cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=Release
        sudo make install
        cd .. && cd ..

    - name: Install compiler and dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci; source ./macports-ci install

        if [ "${{ matrix.cfg.cc }}" = "gcc" ]; then
          brew install gcc@${{ matrix.cfg.cpp-version }}
          echo "CC=gcc-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        else
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.cfg.cpp-version }}.app
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

        # Install the required Library
        brew install libtiff
        brew install glib
        brew install cairo
        brew install gdk-pixbuf
        brew install jpeg
        brew install openjpeg
        brew install opencv
        brew install sqlite
        brew install libxml2
        brew install zlib
        brew install libpng

    - name: Restore from cache and run vcpkg (Windows)
      if: runner.os == 'Windows'
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_windows.diff
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: Build with CMake and vcpkg (Windows)
      if: runner.os == 'Windows'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeAppendedArgs: "-G\"${{ matrix.cfg.generator }}\" -DCMAKE_BUILD_TYPE=Release"
        cmakeBuildType: 'Release'
        buildWithCMakeArgs: '--config Release --target install'

    - name: Build with CMake (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: false
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeAppendedArgs: "-G\"${{ matrix.cfg.generator }}\" -DCMAKE_BUILD_TYPE=Release"
        cmakeBuildType: 'Release'
        buildWithCMakeArgs: '--config Release --target install'
